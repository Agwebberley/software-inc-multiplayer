using Multiplayer.Debugging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Multiplayer.Networking
{
    public static partial class Server
    {
        /// <summary>
        /// Gets called when the Header of Receive is "login"
        /// </summary>
        /// <param name="connectionid">The connection id of the Telepathy.Message</param>
        /// <param name="login">The TcpLogin</param>
        private static void OnUserLogin(int connectionid, TcpLogin login)
        {
            Logging.Info($"[Server] User {login.Data.GetValue("username")} ({connectionid}) tries to login to the server");
            if (Users.Count >= MaxPlayers)
            {
                Logging.Info($"[Server] User {connectionid} tries login but max users reached");
                Send(connectionid, new TcpResponse("login_response", "max_players"));
            }
            else if (Password != (string)login.Data.GetValue("password"))
            {
                Logging.Info($"[Server] User {connectionid} tries login with password {(string)login.Data.GetValue("password")} but pass is {Password}");
                Send(connectionid, new TcpResponse("login_response", "wrong_password"));
            }
            else if (Users.Count < MaxPlayers && Password == (string)login.Data.GetValue("password"))
            {
                Send(connectionid, new TcpResponse("login_response", "ok"));
                Users.Add(new Helpers.User()
                {
                    ID = connectionid,
                    Role = Users.Count < 1 ? Helpers.UserRole.Host : Helpers.UserRole.Client,
                    UniqueID = (string)login.Data.GetValue("uniqueid"),
                    Username = (string)login.Data.GetValue("username")
                });
                Logging.Info($"[Server] User {(string)login.Data.GetValue("username")} logged in!");
                Send(new TcpServerChat($"{(string)login.Data.GetValue("username")} has joined the server.", TcpServerChatType.Info));
                return;
            }
            else
            {
                Logging.Warn($"[Server] Invalid TcpLogin data!");
            }

            Logging.Warn("[Server] User didn't login, check client for details");
        }

        /// <summary>
        /// Returns the user with the ID id
        /// </summary>
        /// <param name="id">The 'connectionId' of the user</param>
        /// <returns>A Helpers.User object representing an user or null</returns>
        public static Helpers.User GetUser(int id)
        {
            return Users.Find(x => x.ID == id);
        }

        /// <summary>
        /// Returns the user with the Unique ID
        /// </summary>
        /// <param name="uniqueid">The User.UniqueId generated by GetUniqueID</param>
        /// <returns>A Helpers.user object representing an user or null</returns>
        public static Helpers.User GetUserByUnique(string uniqueid)
        {
            return Users.Find(x => x.UniqueID == uniqueid);
        }

        /// <summary>
        /// Returns the user with the username
        /// </summary>
        /// <param name="username">The username of the user</param>
        /// <returns>A Helpers.User object representing an user or null</returns>
        public static Helpers.User GetUser(string username)
        {
            return Users.Find(x => x.Username == username);
        }
        /// <summary>
        /// List of users.
        /// </summary>
        public static List<Helpers.User> Users = new List<Helpers.User>();
        /// <summary>
        /// Gets called whenever an user connects to the server
        /// </summary>
        /// <param name="msg">The Telepathy.Message sent by the server.getNextMessage() function</param>
        private static void OnUserConnect(Telepathy.Message msg)
        {
            Logging.Info("[Server] " + msg.connectionId + " Connected");

            //Send a ServerResponse to the user to login
            Send(msg.connectionId, new TcpResponse("login_request", ""));
        }

        /// <summary>
        /// Gets called whenever an user disconnects to the server
        /// </summary>
        /// <param name="msg">The Telepathy.Message sent by the server.getNextMessage() function</param>
        private static void OnUserDisconnect(Telepathy.Message msg)
        {
            Logging.Info("[Server] " + msg.connectionId + " Disconnected");

            //Check if the user with the connectionid exists and if so delete him from the database
            Helpers.User user = Users.Find(x => x.ID == msg.connectionId);
            if (user == null)
            {
                Logging.Warn($"[Server] User with the Id {msg.connectionId} did disconnect but no User object was found for him!");
            }
            else
            {
                Logging.Info($"[Server] User {user.Username} did disconnect from the Server!");
                Users.Remove(user);
            }
        }
    }
}
